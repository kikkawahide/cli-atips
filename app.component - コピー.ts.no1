import { Component } from '@angular/core';
import { DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';
@Component({
  selector: 'app-root',
  template:`
  <form>
  <label for="switch">背景色：</label>
      <!--2チェックボックスをflagプロパティにひも付け-->
    <input id="switch" name="switch" type="checkbox"
    [(ngModel)]="flag" />
    <br>
    <label for="switch">文字サイズ：</label>
    <input id="switch2" name="switch2" type="checkbox"
    [(ngModel)]="flag2" />
</form>
<!--1flagプロパティのtrue／falseに応じてスタイルを適用／解除-->
<div id="panel" class="box" [class.light]="flag"  [class.big]="flag2">
  スタイル定義はできるだけスタイルクラスとしてスタイルシートに分離し、これを着脱するのがベターです。そして、そのスタイルクラスを操作するのがClass Bindingの役割です。<br />
  まずは、具体的な例として、チェックボックスのオンオフに応じて、テキスト領域に対してスタイルを変更するサンプルを見てみましょう。
</div>
<br>
<form>
<!--src属性にsiteプロパティの値をバインド-->
<iframe [src]="safeSite"></iframe>
  <br>
  <label for="name">名前:</label>
  <input id="txtname" name="txtname" type="text" #name /> 
   <!-- イベントハンドラーにテキストボックスへの入力値を引き渡す -->
   <input type="button" value="送信" (click)="onclick(name.value)" />
   <div>{{msg}}</div>
   <!-- テキストボックスtxtnameに対して、nameプロパティをひも付け -->
   <input id="txtName" name="txtName" type="text" 
    [(ngModel)]="name2" 
    (input)="name2=$event.target.value" />
    <div> Hello, {{name2}}!!</div>
   
    
   </form>

   <div>{{ mails.length |i18nPlural: labels }}
 <!--イベントハンドラーにイベントオブジェクトを渡す-->
    <input type="button" value="ログ出力" (click)="onclick($event)" />
 
<!--  イベントハンドラーを登録 -->
<input type="button" value="現在時刻" (click)="onclick()" />
<div>{{result}}</div>
<ol>
<li>元の値：{{value}}</li>
<li>percent（デフォルト）：{{value | percent}}</li>
<li>percent（桁数指定）：{{value | percent : '3.1-2'}}</li>
</ol>
<ol>
      <li>元の値：{{value2}}</li>
      <li>currency（デフォルト）：{{value2 | currency}}</li>
      <li>currency（コードのみ）：{{value2 | currency : 'JPY'}}</li>
      <li>currency（円）：{{value2 | currency : 'JPY': true}}</li>
      <li>currency（ユーロ）：{{value2 | currency : 'EUR': true}}</li>
      <li>currency（桁数）：{{value2 | currency : 'JPY': true: '5.1-3'}}</li>
    </ol>
    <form>
    <label><input id="style1" name="style" type="radio"
      (click)="bgcolor=''" />ノーマル</label>
    <label><input id="style1" name="style" type="radio"
      (click)="bgcolor='#FF7F50'" />暖色</label>
    <label><input id="style1" name="style" type="radio"
      (click)="bgcolor='#00FFFF'" />寒色</label>
  </form>  
  <!--1bgcolorプロパティの値に応じて背景色を変更-->
  <div [style.background-color]="bgcolor">
    要素のスタイルプロパティを操作するには、Style Bindingを使います。
  </div>
  <form>
    <label><input id="style1" name="style" type="radio"
      (click)="size='150%'" />大</label>
    <label><input id="style1" name="style" type="radio"
      (click)="size='100%'" />中</label>
    <label><input id="style1" name="style" type="radio"
      (click)="size='50%'" />小</label>
  </form>
      <div [style.font-size.%]="size">
  要素のスタイルプロパティを操作するには...
</div>

`,

styles: [`
  .box {
    border:solid 1px #000;
    width: 400px;
    padding: 10px;
  }
  
  .light {
    color: #f00;
    background-color: #ffc;
  }
  .big {
    font-size: 150%;
    line-height: 150%;
  }
`]
})
export class AppComponent {
   //変数resultを初期化
  name = 'Tom';
  name2 = 'Tom';
  result='現在時刻は不明です。';
  msg= '';
  value = 0.98765;
  value2 = 1234.98765;
  bgcolor = '';
  flag = false;
  flag2 = false;
  //site = 'http://tcs-o.co.jp/TESTY/an-top.html/';
  safeSite: SafeResourceUrl;
  //site = 'http://tcs-o.co.jp/TESTY/cal2-takasa.html';
  site = 'http://tcs-o.co.jp/TESTY/an-top.html';

  constructor(private sanitizer: DomSanitizer) {
    this.safeSite = sanitizer.bypassSecurityTrustResourceUrl(this.site);
  }
  // 表示すべきメッセージ
  labels = {
    '=0'   : '新着メッセージはありません。',
    '=1'   : 'メッセージがあります。',
    'other': '#件のメッセージがあります。',
  }

  // 新着メール情報
  mails = [
    { name: '山田太郎', body: 'こんにちは。今年は暑いねー。' },
    { name: '鈴木久美子', body: 'お久しぶりです。元気にしてますか？' },
    { name: '佐藤雄二', body: '今度の日曜日、ランチしに行きませんか。' },
    { name: '山口夕夏', body: 'お誕生日おめでとう！' },
    { name: '田中仁', body: 'いつもお世話になっております。明日はよろしくお願い致します。' }
  ];
  
   
   // イベント情報をログに出力
   onclick(e: any) {
    console.log(e);
    this.msg = `Hello, ${e}!!`;
  
    this.result=`現在時刻は ${new Date().toLocaleTimeString()}です。`;
  }
  
}
